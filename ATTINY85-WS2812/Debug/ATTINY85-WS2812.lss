
ATTINY85-WS2812.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000005ca  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000660  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800060  00800060  0000065e  2**0
                  ALLOC
  3 .eeprom       00000002  00810000  00810000  0000065e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000030  00000000  00000000  00000660  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000690  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 000000b8  00000000  00000000  000006d0  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000b49  00000000  00000000  00000788  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000627  00000000  00000000  000012d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000747  00000000  00000000  000018f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000080  00000000  00000000  00002040  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000047c  00000000  00000000  000020c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000002a7  00000000  00000000  0000253c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000048  00000000  00000000  000027e3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	8d c1       	rjmp	.+794    	; 0x31c <__ctors_end>
   2:	9c c1       	rjmp	.+824    	; 0x33c <__bad_interrupt>
   4:	d4 c1       	rjmp	.+936    	; 0x3ae <__vector_2>
   6:	9a c1       	rjmp	.+820    	; 0x33c <__bad_interrupt>
   8:	99 c1       	rjmp	.+818    	; 0x33c <__bad_interrupt>
   a:	98 c1       	rjmp	.+816    	; 0x33c <__bad_interrupt>
   c:	97 c1       	rjmp	.+814    	; 0x33c <__bad_interrupt>
   e:	96 c1       	rjmp	.+812    	; 0x33c <__bad_interrupt>
  10:	95 c1       	rjmp	.+810    	; 0x33c <__bad_interrupt>
  12:	94 c1       	rjmp	.+808    	; 0x33c <__bad_interrupt>
  14:	93 c1       	rjmp	.+806    	; 0x33c <__bad_interrupt>
  16:	92 c1       	rjmp	.+804    	; 0x33c <__bad_interrupt>
  18:	c0 c1       	rjmp	.+896    	; 0x39a <__vector_12>
  1a:	90 c1       	rjmp	.+800    	; 0x33c <__bad_interrupt>
  1c:	8f c1       	rjmp	.+798    	; 0x33c <__bad_interrupt>

0000001e <__trampolines_end>:
  1e:	00 ff       	sbrs	r16, 0
  20:	00 00       	nop
  22:	f8 00       	.word	0x00f8	; ????
  24:	00 f1       	brcs	.+64     	; 0x66 <__SREG__+0x27>
  26:	00 00       	nop
  28:	eb 00       	.word	0x00eb	; ????
  2a:	00 e4       	ldi	r16, 0x40	; 64
  2c:	00 00       	nop
  2e:	de 00       	.word	0x00de	; ????
  30:	00 d7       	rcall	.+3584   	; 0xe32 <_etext+0x868>
  32:	01 00       	.word	0x0001	; ????
  34:	d1 01       	movw	r26, r2
  36:	00 cb       	rjmp	.-2560   	; 0xfffff638 <__eeprom_end+0xff7ef636>
  38:	01 00       	.word	0x0001	; ????
  3a:	c5 01       	movw	r24, r10
  3c:	00 bf       	out	0x30, r16	; 48
  3e:	02 00       	.word	0x0002	; ????
  40:	b9 02       	muls	r27, r25
  42:	00 b4       	in	r0, 0x20	; 32
  44:	03 00       	.word	0x0003	; ????
  46:	ae 03       	fmulsu	r18, r22
  48:	00 a9       	ldd	r16, Z+48	; 0x30
  4a:	04 00       	.word	0x0004	; ????
  4c:	a3 05       	cpc	r26, r3
  4e:	00 9e       	mul	r0, r16
  50:	05 00       	.word	0x0005	; ????
  52:	99 06       	cpc	r9, r25
  54:	00 94       	com	r0
  56:	07 00       	.word	0x0007	; ????
  58:	8f 08       	sbc	r8, r15
  5a:	00 8a       	std	Z+16, r0	; 0x10
  5c:	09 00       	.word	0x0009	; ????
  5e:	85 0a       	sbc	r8, r21
  60:	00 80       	ld	r0, Z
  62:	0b 00       	.word	0x000b	; ????
  64:	7b 0d       	add	r23, r11
  66:	00 77       	andi	r16, 0x70	; 112
  68:	0e 00       	.word	0x000e	; ????
  6a:	72 0f       	add	r23, r18
  6c:	00 6e       	ori	r16, 0xE0	; 224
  6e:	11 00       	.word	0x0011	; ????
  70:	6a 12       	cpse	r6, r26
  72:	00 66       	ori	r16, 0x60	; 96
  74:	14 00       	.word	0x0014	; ????
  76:	62 15       	cp	r22, r2
  78:	00 5e       	subi	r16, 0xE0	; 224
  7a:	17 00       	.word	0x0017	; ????
  7c:	5a 19       	sub	r21, r10
  7e:	00 56       	subi	r16, 0x60	; 96
  80:	1b 00       	.word	0x001b	; ????
  82:	52 1d       	adc	r21, r2
  84:	00 4f       	sbci	r16, 0xF0	; 240
  86:	1f 00       	.word	0x001f	; ????
  88:	4b 21       	and	r20, r11
  8a:	00 48       	sbci	r16, 0x80	; 128
  8c:	23 00       	.word	0x0023	; ????
  8e:	45 26       	eor	r4, r21
  90:	00 41       	sbci	r16, 0x10	; 16
  92:	28 00       	.word	0x0028	; ????
  94:	3e 2a       	or	r3, r30
  96:	00 3b       	cpi	r16, 0xB0	; 176
  98:	2d 00       	.word	0x002d	; ????
  9a:	38 30       	cpi	r19, 0x08	; 8
  9c:	00 35       	cpi	r16, 0x50	; 80
  9e:	32 00       	.word	0x0032	; ????
  a0:	32 35       	cpi	r19, 0x52	; 82
  a2:	00 30       	cpi	r16, 0x00	; 0
  a4:	38 00       	.word	0x0038	; ????
  a6:	2d 3b       	cpi	r18, 0xBD	; 189
  a8:	00 2a       	or	r0, r16
  aa:	3e 00       	.word	0x003e	; ????
  ac:	28 41       	sbci	r18, 0x18	; 24
  ae:	00 26       	eor	r0, r16
  b0:	45 00       	.word	0x0045	; ????
  b2:	23 48       	sbci	r18, 0x83	; 131
  b4:	00 21       	and	r16, r0
  b6:	4b 00       	.word	0x004b	; ????
  b8:	1f 4f       	sbci	r17, 0xFF	; 255
  ba:	00 1d       	adc	r16, r0
  bc:	52 00       	.word	0x0052	; ????
  be:	1b 56       	subi	r17, 0x6B	; 107
  c0:	00 19       	sub	r16, r0
  c2:	5a 00       	.word	0x005a	; ????
  c4:	17 5e       	subi	r17, 0xE7	; 231
  c6:	00 15       	cp	r16, r0
  c8:	62 00       	.word	0x0062	; ????
  ca:	14 66       	ori	r17, 0x64	; 100
  cc:	00 12       	cpse	r0, r16
  ce:	6a 00       	.word	0x006a	; ????
  d0:	11 6e       	ori	r17, 0xE1	; 225
  d2:	00 0f       	add	r16, r16
  d4:	72 00       	.word	0x0072	; ????
  d6:	0e 77       	andi	r16, 0x7E	; 126
  d8:	00 0d       	add	r16, r0
  da:	7b 00       	.word	0x007b	; ????
  dc:	0b 80       	ldd	r0, Y+3	; 0x03
  de:	00 0a       	sbc	r0, r16
  e0:	85 00       	.word	0x0085	; ????
  e2:	09 8a       	std	Y+17, r0	; 0x11
  e4:	00 08       	sbc	r0, r0
  e6:	8f 00       	.word	0x008f	; ????
  e8:	07 94       	ror	r0
  ea:	00 06       	cpc	r0, r16
  ec:	99 00       	.word	0x0099	; ????
  ee:	05 9e       	mul	r0, r21
  f0:	00 05       	cpc	r16, r0
  f2:	a3 00       	.word	0x00a3	; ????
  f4:	04 a9       	ldd	r16, Z+52	; 0x34
  f6:	00 03       	mulsu	r16, r16
  f8:	ae 00       	.word	0x00ae	; ????
  fa:	03 b4       	in	r0, 0x23	; 35
  fc:	00 02       	muls	r16, r16
  fe:	b9 00       	.word	0x00b9	; ????
 100:	02 bf       	out	0x32, r16	; 50
 102:	00 01       	movw	r0, r0
 104:	c5 00       	.word	0x00c5	; ????
 106:	01 cb       	rjmp	.-2558   	; 0xfffff70a <__eeprom_end+0xff7ef708>
 108:	00 01       	movw	r0, r0
 10a:	d1 00       	.word	0x00d1	; ????
 10c:	01 d7       	rcall	.+3586   	; 0xf10 <_etext+0x946>
 10e:	00 00       	nop
 110:	de 00       	.word	0x00de	; ????
 112:	00 e4       	ldi	r16, 0x40	; 64
 114:	00 00       	nop
 116:	eb 00       	.word	0x00eb	; ????
 118:	00 f1       	brcs	.+64     	; 0x15a <__SREG__+0x11b>
 11a:	00 00       	nop
 11c:	f8 00       	.word	0x00f8	; ????
 11e:	00 ff       	sbrs	r16, 0
 120:	00 00       	nop
 122:	f8 00       	.word	0x00f8	; ????
 124:	00 f1       	brcs	.+64     	; 0x166 <__SREG__+0x127>
 126:	00 00       	nop
 128:	eb 00       	.word	0x00eb	; ????
 12a:	00 e4       	ldi	r16, 0x40	; 64
 12c:	00 00       	nop
 12e:	de 01       	movw	r26, r28
 130:	00 d7       	rcall	.+3584   	; 0xf32 <_etext+0x968>
 132:	01 00       	.word	0x0001	; ????
 134:	d1 01       	movw	r26, r2
 136:	00 cb       	rjmp	.-2560   	; 0xfffff738 <__eeprom_end+0xff7ef736>
 138:	01 00       	.word	0x0001	; ????
 13a:	c5 02       	muls	r28, r21
 13c:	00 bf       	out	0x30, r16	; 48
 13e:	02 00       	.word	0x0002	; ????
 140:	b9 03       	fmulsu	r19, r17
 142:	00 b4       	in	r0, 0x20	; 32
 144:	03 00       	.word	0x0003	; ????
 146:	ae 04       	cpc	r10, r14
 148:	00 a9       	ldd	r16, Z+48	; 0x30
 14a:	05 00       	.word	0x0005	; ????
 14c:	a3 05       	cpc	r26, r3
 14e:	00 9e       	mul	r0, r16
 150:	06 00       	.word	0x0006	; ????
 152:	99 07       	cpc	r25, r25
 154:	00 94       	com	r0
 156:	08 00       	.word	0x0008	; ????
 158:	8f 09       	sbc	r24, r15
 15a:	00 8a       	std	Z+16, r0	; 0x10
 15c:	0a 00       	.word	0x000a	; ????
 15e:	85 0b       	sbc	r24, r21
 160:	00 80       	ld	r0, Z
 162:	0d 00       	.word	0x000d	; ????
 164:	7b 0e       	add	r7, r27
 166:	00 77       	andi	r16, 0x70	; 112
 168:	0f 00       	.word	0x000f	; ????
 16a:	72 11       	cpse	r23, r2
 16c:	00 6e       	ori	r16, 0xE0	; 224
 16e:	12 00       	.word	0x0012	; ????
 170:	6a 14       	cp	r6, r10
 172:	00 66       	ori	r16, 0x60	; 96
 174:	15 00       	.word	0x0015	; ????
 176:	62 17       	cp	r22, r18
 178:	00 5e       	subi	r16, 0xE0	; 224
 17a:	19 00       	.word	0x0019	; ????
 17c:	5a 1b       	sub	r21, r26
 17e:	00 56       	subi	r16, 0x60	; 96
 180:	1d 00       	.word	0x001d	; ????
 182:	52 1f       	adc	r21, r18
 184:	00 4f       	sbci	r16, 0xF0	; 240
 186:	21 00       	.word	0x0021	; ????
 188:	4b 23       	and	r20, r27
 18a:	00 48       	sbci	r16, 0x80	; 128
 18c:	26 00       	.word	0x0026	; ????
 18e:	45 28       	or	r4, r5
 190:	00 41       	sbci	r16, 0x10	; 16
 192:	2a 00       	.word	0x002a	; ????
 194:	3e 2d       	mov	r19, r14
 196:	00 3b       	cpi	r16, 0xB0	; 176
 198:	30 00       	.word	0x0030	; ????
 19a:	38 32       	cpi	r19, 0x28	; 40
 19c:	00 35       	cpi	r16, 0x50	; 80
 19e:	35 00       	.word	0x0035	; ????
 1a0:	32 38       	cpi	r19, 0x82	; 130
 1a2:	00 30       	cpi	r16, 0x00	; 0
 1a4:	3b 00       	.word	0x003b	; ????
 1a6:	2d 3e       	cpi	r18, 0xED	; 237
 1a8:	00 2a       	or	r0, r16
 1aa:	41 00       	.word	0x0041	; ????
 1ac:	28 45       	sbci	r18, 0x58	; 88
 1ae:	00 26       	eor	r0, r16
 1b0:	48 00       	.word	0x0048	; ????
 1b2:	23 4b       	sbci	r18, 0xB3	; 179
 1b4:	00 21       	and	r16, r0
 1b6:	4f 00       	.word	0x004f	; ????
 1b8:	1f 52       	subi	r17, 0x2F	; 47
 1ba:	00 1d       	adc	r16, r0
 1bc:	56 00       	.word	0x0056	; ????
 1be:	1b 5a       	subi	r17, 0xAB	; 171
 1c0:	00 19       	sub	r16, r0
 1c2:	5e 00       	.word	0x005e	; ????
 1c4:	17 62       	ori	r17, 0x27	; 39
 1c6:	00 15       	cp	r16, r0
 1c8:	66 00       	.word	0x0066	; ????
 1ca:	14 6a       	ori	r17, 0xA4	; 164
 1cc:	00 12       	cpse	r0, r16
 1ce:	6e 00       	.word	0x006e	; ????
 1d0:	11 72       	andi	r17, 0x21	; 33
 1d2:	00 0f       	add	r16, r16
 1d4:	77 00       	.word	0x0077	; ????
 1d6:	0e 7b       	andi	r16, 0xBE	; 190
 1d8:	00 0d       	add	r16, r0
 1da:	80 00       	.word	0x0080	; ????
 1dc:	0b 85       	ldd	r16, Y+11	; 0x0b
 1de:	00 0a       	sbc	r0, r16
 1e0:	8a 00       	.word	0x008a	; ????
 1e2:	09 8f       	std	Y+25, r16	; 0x19
 1e4:	00 08       	sbc	r0, r0
 1e6:	94 00       	.word	0x0094	; ????
 1e8:	07 99       	sbic	0x00, 7	; 0
 1ea:	00 06       	cpc	r0, r16
 1ec:	9e 00       	.word	0x009e	; ????
 1ee:	05 a3       	std	Z+37, r16	; 0x25
 1f0:	00 05       	cpc	r16, r0
 1f2:	a9 00       	.word	0x00a9	; ????
 1f4:	04 ae       	std	Z+60, r0	; 0x3c
 1f6:	00 03       	mulsu	r16, r16
 1f8:	b4 00       	.word	0x00b4	; ????
 1fa:	03 b9       	out	0x03, r16	; 3
 1fc:	00 02       	muls	r16, r16
 1fe:	bf 00       	.word	0x00bf	; ????
 200:	02 c5       	rjmp	.+2564   	; 0xc06 <_etext+0x63c>
 202:	00 01       	movw	r0, r0
 204:	cb 00       	.word	0x00cb	; ????
 206:	01 d1       	rcall	.+514    	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 208:	00 01       	movw	r0, r0
 20a:	d7 00       	.word	0x00d7	; ????
 20c:	01 de       	rcall	.-1022   	; 0xfffffe10 <__eeprom_end+0xff7efe0e>
 20e:	00 00       	nop
 210:	e4 00       	.word	0x00e4	; ????
 212:	00 eb       	ldi	r16, 0xB0	; 176
 214:	00 00       	nop
 216:	f1 00       	.word	0x00f1	; ????
 218:	00 f8       	bld	r0, 0
 21a:	00 00       	nop
 21c:	ff 00       	.word	0x00ff	; ????
 21e:	00 f8       	bld	r0, 0
 220:	00 00       	nop
 222:	f1 00       	.word	0x00f1	; ????
 224:	00 eb       	ldi	r16, 0xB0	; 176
 226:	00 00       	nop
 228:	e4 00       	.word	0x00e4	; ????
 22a:	00 de       	rcall	.-1024   	; 0xfffffe2c <__eeprom_end+0xff7efe2a>
 22c:	00 00       	nop
 22e:	d7 01       	movw	r26, r14
 230:	00 d1       	rcall	.+512    	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
 232:	01 00       	.word	0x0001	; ????
 234:	cb 01       	movw	r24, r22
 236:	00 c5       	rjmp	.+2560   	; 0xc38 <_etext+0x66e>
 238:	01 00       	.word	0x0001	; ????
 23a:	bf 02       	muls	r27, r31
 23c:	00 b9       	out	0x00, r16	; 0
 23e:	02 00       	.word	0x0002	; ????
 240:	b4 03       	fmuls	r19, r20
 242:	00 ae       	std	Z+56, r0	; 0x38
 244:	03 00       	.word	0x0003	; ????
 246:	a9 04       	cpc	r10, r9
 248:	00 a3       	std	Z+32, r16	; 0x20
 24a:	05 00       	.word	0x0005	; ????
 24c:	9e 05       	cpc	r25, r14
 24e:	00 99       	sbic	0x00, 0	; 0
 250:	06 00       	.word	0x0006	; ????
 252:	94 07       	cpc	r25, r20
 254:	00 8f       	std	Z+24, r16	; 0x18
 256:	08 00       	.word	0x0008	; ????
 258:	8a 09       	sbc	r24, r10
 25a:	00 85       	ldd	r16, Z+8	; 0x08
 25c:	0a 00       	.word	0x000a	; ????
 25e:	80 0b       	sbc	r24, r16
 260:	00 7b       	andi	r16, 0xB0	; 176
 262:	0d 00       	.word	0x000d	; ????
 264:	77 0e       	add	r7, r23
 266:	00 72       	andi	r16, 0x20	; 32
 268:	0f 00       	.word	0x000f	; ????
 26a:	6e 11       	cpse	r22, r14
 26c:	00 6a       	ori	r16, 0xA0	; 160
 26e:	12 00       	.word	0x0012	; ????
 270:	66 14       	cp	r6, r6
 272:	00 62       	ori	r16, 0x20	; 32
 274:	15 00       	.word	0x0015	; ????
 276:	5e 17       	cp	r21, r30
 278:	00 5a       	subi	r16, 0xA0	; 160
 27a:	19 00       	.word	0x0019	; ????
 27c:	56 1b       	sub	r21, r22
 27e:	00 52       	subi	r16, 0x20	; 32
 280:	1d 00       	.word	0x001d	; ????
 282:	4f 1f       	adc	r20, r31
 284:	00 4b       	sbci	r16, 0xB0	; 176
 286:	21 00       	.word	0x0021	; ????
 288:	48 23       	and	r20, r24
 28a:	00 45       	sbci	r16, 0x50	; 80
 28c:	26 00       	.word	0x0026	; ????
 28e:	41 28       	or	r4, r1
 290:	00 3e       	cpi	r16, 0xE0	; 224
 292:	2a 00       	.word	0x002a	; ????
 294:	3b 2d       	mov	r19, r11
 296:	00 38       	cpi	r16, 0x80	; 128
 298:	30 00       	.word	0x0030	; ????
 29a:	35 32       	cpi	r19, 0x25	; 37
 29c:	00 32       	cpi	r16, 0x20	; 32
 29e:	35 00       	.word	0x0035	; ????
 2a0:	30 38       	cpi	r19, 0x80	; 128
 2a2:	00 2d       	mov	r16, r0
 2a4:	3b 00       	.word	0x003b	; ????
 2a6:	2a 3e       	cpi	r18, 0xEA	; 234
 2a8:	00 28       	or	r0, r0
 2aa:	41 00       	.word	0x0041	; ????
 2ac:	26 45       	sbci	r18, 0x56	; 86
 2ae:	00 23       	and	r16, r16
 2b0:	48 00       	.word	0x0048	; ????
 2b2:	21 4b       	sbci	r18, 0xB1	; 177
 2b4:	00 1f       	adc	r16, r16
 2b6:	4f 00       	.word	0x004f	; ????
 2b8:	1d 52       	subi	r17, 0x2D	; 45
 2ba:	00 1b       	sub	r16, r16
 2bc:	56 00       	.word	0x0056	; ????
 2be:	19 5a       	subi	r17, 0xA9	; 169
 2c0:	00 17       	cp	r16, r16
 2c2:	5e 00       	.word	0x005e	; ????
 2c4:	15 62       	ori	r17, 0x25	; 37
 2c6:	00 14       	cp	r0, r0
 2c8:	66 00       	.word	0x0066	; ????
 2ca:	12 6a       	ori	r17, 0xA2	; 162
 2cc:	00 11       	cpse	r16, r0
 2ce:	6e 00       	.word	0x006e	; ????
 2d0:	0f 72       	andi	r16, 0x2F	; 47
 2d2:	00 0e       	add	r0, r16
 2d4:	77 00       	.word	0x0077	; ????
 2d6:	0d 7b       	andi	r16, 0xBD	; 189
 2d8:	00 0b       	sbc	r16, r16
 2da:	80 00       	.word	0x0080	; ????
 2dc:	0a 85       	ldd	r16, Y+10	; 0x0a
 2de:	00 09       	sbc	r16, r0
 2e0:	8a 00       	.word	0x008a	; ????
 2e2:	08 8f       	std	Y+24, r16	; 0x18
 2e4:	00 07       	cpc	r16, r16
 2e6:	94 00       	.word	0x0094	; ????
 2e8:	06 99       	sbic	0x00, 6	; 0
 2ea:	00 05       	cpc	r16, r0
 2ec:	9e 00       	.word	0x009e	; ????
 2ee:	05 a3       	std	Z+37, r16	; 0x25
 2f0:	00 04       	cpc	r0, r0
 2f2:	a9 00       	.word	0x00a9	; ????
 2f4:	03 ae       	std	Z+59, r0	; 0x3b
 2f6:	00 03       	mulsu	r16, r16
 2f8:	b4 00       	.word	0x00b4	; ????
 2fa:	02 b9       	out	0x02, r16	; 2
 2fc:	00 02       	muls	r16, r16
 2fe:	bf 00       	.word	0x00bf	; ????
 300:	01 c5       	rjmp	.+2562   	; 0xd04 <_etext+0x73a>
 302:	00 01       	movw	r0, r0
 304:	cb 00       	.word	0x00cb	; ????
 306:	01 d1       	rcall	.+514    	; 0x50a <__LOCK_REGION_LENGTH__+0x10a>
 308:	00 01       	movw	r0, r0
 30a:	d7 00       	.word	0x00d7	; ????
 30c:	00 de       	rcall	.-1024   	; 0xffffff0e <__eeprom_end+0xff7eff0c>
 30e:	00 00       	nop
 310:	e4 00       	.word	0x00e4	; ????
 312:	00 eb       	ldi	r16, 0xB0	; 176
 314:	00 00       	nop
 316:	f1 00       	.word	0x00f1	; ????
 318:	00 f8       	bld	r0, 0
	...

0000031c <__ctors_end>:
 31c:	11 24       	eor	r1, r1
 31e:	1f be       	out	0x3f, r1	; 63
 320:	cf e5       	ldi	r28, 0x5F	; 95
 322:	d2 e0       	ldi	r29, 0x02	; 2
 324:	de bf       	out	0x3e, r29	; 62
 326:	cd bf       	out	0x3d, r28	; 61

00000328 <__do_clear_bss>:
 328:	20 e0       	ldi	r18, 0x00	; 0
 32a:	a0 e6       	ldi	r26, 0x60	; 96
 32c:	b0 e0       	ldi	r27, 0x00	; 0
 32e:	01 c0       	rjmp	.+2      	; 0x332 <.do_clear_bss_start>

00000330 <.do_clear_bss_loop>:
 330:	1d 92       	st	X+, r1

00000332 <.do_clear_bss_start>:
 332:	a1 36       	cpi	r26, 0x61	; 97
 334:	b2 07       	cpc	r27, r18
 336:	e1 f7       	brne	.-8      	; 0x330 <.do_clear_bss_loop>
 338:	49 d0       	rcall	.+146    	; 0x3cc <main>
 33a:	45 c1       	rjmp	.+650    	; 0x5c6 <_exit>

0000033c <__bad_interrupt>:
 33c:	61 ce       	rjmp	.-830    	; 0x0 <__vectors>

0000033e <pixel_tx_progmem>:
	
	//r25:24 = amount of pixel
	//r23:22  = ptr+start offset
	//r21:20  = ptr
	//r19:18  = total bytes of array + ptr
	movw R30,R22
 33e:	fb 01       	movw	r30, r22

00000340 <init1>:

init1:
	lpm GREEN,z+ //g
 340:	b5 91       	lpm	r27, Z+
	lpm RED,z+ //r
 342:	a5 91       	lpm	r26, Z+
	lpm BLUE,z+ //b
 344:	75 91       	lpm	r23, Z+

	ldi BITCOUNTER,24
 346:	68 e1       	ldi	r22, 0x18	; 24

00000348 <start1>:

start1:
	lsl BLUE ;1
 348:	77 0f       	add	r23, r23
	rol RED ;2
 34a:	aa 1f       	adc	r26, r26
	rol GREEN ;3
 34c:	bb 1f       	adc	r27, r27
	brcs longexit1 ;4 FOR FALSE/5 FOR TRUE
 34e:	28 f0       	brcs	.+10     	; 0x35a <longexit1>

00000350 <quickexit1>:

quickexit1:

	sbi _SFR_IO_ADDR(pixelport),pixelpin ;2
 350:	c4 9a       	sbi	0x18, 4	; 24
	dec BITCOUNTER    ;3
 352:	6a 95       	dec	r22
	cbi _SFR_IO_ADDR(pixelport),pixelpin ;2
 354:	c4 98       	cbi	0x18, 4	; 24
	brne start1
 356:	c1 f7       	brne	.-16     	; 0x348 <start1>
	rjmp nextpixel1
 358:	05 c0       	rjmp	.+10     	; 0x364 <nextpixel1>

0000035a <longexit1>:

longexit1: 

	sbi _SFR_IO_ADDR(pixelport),pixelpin ;2
 35a:	c4 9a       	sbi	0x18, 4	; 24
	dec BITCOUNTER ;3
 35c:	6a 95       	dec	r22
	rjmp delay1 ;5
 35e:	00 c0       	rjmp	.+0      	; 0x360 <delay1>

00000360 <delay1>:

delay1:
	cbi _SFR_IO_ADDR(pixelport),pixelpin ;2
 360:	c4 98       	cbi	0x18, 4	; 24
	brne start1 ;4
 362:	91 f7       	brne	.-28     	; 0x348 <start1>

00000364 <nextpixel1>:

nextpixel1:
	cp R18,R30
 364:	2e 17       	cp	r18, r30
	cpc R19,R31
 366:	3f 07       	cpc	r19, r31
	brne decrementpixel1
 368:	09 f4       	brne	.+2      	; 0x36c <decrementpixel1>
	movw R30,R20
 36a:	fa 01       	movw	r30, r20

0000036c <decrementpixel1>:

decrementpixel1:
	sbiw R24,1
 36c:	01 97       	sbiw	r24, 0x01	; 1
	brne init1
 36e:	41 f7       	brne	.-48     	; 0x340 <init1>

00000370 <end1>:

end1:
	ret
 370:	08 95       	ret

00000372 <pixel_tx_singlecolor>:
	//r23:22  = green
	//r21:20  = red
	//r19:18  = blue

init2:
	ldi R23,24
 372:	78 e1       	ldi	r23, 0x18	; 24

00000374 <start2>:

start2:

	lsl r18 ;1
 374:	22 0f       	add	r18, r18
	rol r20 ;2
 376:	44 1f       	adc	r20, r20
	rol r22 ;3
 378:	66 1f       	adc	r22, r22
	brcs longexit1 ;4 FOR FALSE/5 FOR TRUE
 37a:	78 f3       	brcs	.-34     	; 0x35a <longexit1>

0000037c <quickexit2>:

quickexit2:

	sbi _SFR_IO_ADDR(pixelport),pixelpin ;2
 37c:	c4 9a       	sbi	0x18, 4	; 24
	adc R18,R1
 37e:	21 1d       	adc	r18, r1
	cbi _SFR_IO_ADDR(pixelport),pixelpin ;2
 380:	c4 98       	cbi	0x18, 4	; 24
	dec R23    ;3
 382:	7a 95       	dec	r23
	brne start2
 384:	b9 f7       	brne	.-18     	; 0x374 <start2>
	rjmp decrementpixel2
 386:	06 c0       	rjmp	.+12     	; 0x394 <decrementpixel2>

00000388 <longexit2>:
	

longexit2: 

	sbi _SFR_IO_ADDR(pixelport),pixelpin ;2
 388:	c4 9a       	sbi	0x18, 4	; 24
	nop
 38a:	00 00       	nop
	adc R18,R1
 38c:	21 1d       	adc	r18, r1
	dec R23;4
 38e:	7a 95       	dec	r23

00000390 <delay2>:
	

delay2:
	cbi _SFR_IO_ADDR(pixelport),pixelpin ;2
 390:	c4 98       	cbi	0x18, 4	; 24
	brne start2 ;4
 392:	81 f7       	brne	.-32     	; 0x374 <start2>

00000394 <decrementpixel2>:

	
decrementpixel2:
	sbiw R24,1
 394:	01 97       	sbiw	r24, 0x01	; 1
	brne init2
 396:	69 f7       	brne	.-38     	; 0x372 <pixel_tx_singlecolor>

00000398 <end2>:

end2:
	ret
 398:	08 95       	ret

0000039a <__vector_12>:

control EEMEM save;
volatile uint8_t read_pinb;

ISR(WDT_vect)
{
 39a:	1f 92       	push	r1
 39c:	0f 92       	push	r0
 39e:	0f b6       	in	r0, 0x3f	; 63
 3a0:	0f 92       	push	r0
 3a2:	11 24       	eor	r1, r1
}
 3a4:	0f 90       	pop	r0
 3a6:	0f be       	out	0x3f, r0	; 63
 3a8:	0f 90       	pop	r0
 3aa:	1f 90       	pop	r1
 3ac:	18 95       	reti

000003ae <__vector_2>:


ISR(PCINT0_vect)
{
 3ae:	1f 92       	push	r1
 3b0:	0f 92       	push	r0
 3b2:	0f b6       	in	r0, 0x3f	; 63
 3b4:	0f 92       	push	r0
 3b6:	11 24       	eor	r1, r1
 3b8:	8f 93       	push	r24

	read_pinb = PINB;
 3ba:	86 b3       	in	r24, 0x16	; 22
 3bc:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
		if(++setting.mode>=MODE_BOUNDS)
		setting.speed=MODE_RAINBOW;		
	}
	*/
	
}
 3c0:	8f 91       	pop	r24
 3c2:	0f 90       	pop	r0
 3c4:	0f be       	out	0x3f, r0	; 63
 3c6:	0f 90       	pop	r0
 3c8:	1f 90       	pop	r1
 3ca:	18 95       	reti

000003cc <main>:

int main(void)
{
 3cc:	cf 93       	push	r28
 3ce:	df 93       	push	r29
 3d0:	00 d0       	rcall	.+0      	; 0x3d2 <main+0x6>
 3d2:	cd b7       	in	r28, 0x3d	; 61
 3d4:	de b7       	in	r29, 0x3e	; 62
}

void peripheral_init(void)
{

	DDRB = PIN(OUTPUT_PIN) | PIN(PB1) | PIN(PB0) ;
 3d6:	83 e1       	ldi	r24, 0x13	; 19
 3d8:	87 bb       	out	0x17, r24	; 23
	PORTB = PIN(BTN_MODE) | PIN(BTN_SPEED);
 3da:	8c e0       	ldi	r24, 0x0C	; 12
 3dc:	88 bb       	out	0x18, r24	; 24
	
	PCMSK = PIN(BTN_MODE) | PIN(BTN_SPEED);
 3de:	85 bb       	out	0x15, r24	; 21
	GIMSK = BIT(PCIE); //enable PCINT0 interrupt
 3e0:	80 e2       	ldi	r24, 0x20	; 32
 3e2:	8b bf       	out	0x3b, r24	; 59
	
	ACSR  = BIT(ACD); //disable analog comparator
 3e4:	80 e8       	ldi	r24, 0x80	; 128
 3e6:	88 b9       	out	0x08, r24	; 8
	
	PRR = BIT(PRTIM1) | BIT(PRUSI) | BIT(PRADC) |BIT(PRTIM0);
 3e8:	8f e0       	ldi	r24, 0x0F	; 15
 3ea:	80 bd       	out	0x20, r24	; 32
	//disable all unused peripherals

	set_sleep_mode(SLEEP_MODE_PWR_DOWN);
 3ec:	85 b7       	in	r24, 0x35	; 53
 3ee:	87 7e       	andi	r24, 0xE7	; 231
 3f0:	80 61       	ori	r24, 0x10	; 16
 3f2:	85 bf       	out	0x35, r24	; 53
{
	//peripherals setup for lowest power possible
	peripheral_init();
	
	//vars for controlling state of leds
	control setting={1};
 3f4:	1a 82       	std	Y+2, r1	; 0x02
 3f6:	19 82       	std	Y+1, r1	; 0x01
 3f8:	81 e0       	ldi	r24, 0x01	; 1
 3fa:	89 83       	std	Y+1, r24	; 0x01
	rgb neopixel={0,255,0};		
	counters cnt={0};
		
	//settings are changes in ISR, EEMEM to save settings
	eeprom_read_block(&save,&setting,sizeof(control));
 3fc:	42 e0       	ldi	r20, 0x02	; 2
 3fe:	50 e0       	ldi	r21, 0x00	; 0
 400:	be 01       	movw	r22, r28
 402:	6f 5f       	subi	r22, 0xFF	; 255
 404:	7f 4f       	sbci	r23, 0xFF	; 255
 406:	80 e0       	ldi	r24, 0x00	; 0
 408:	90 e0       	ldi	r25, 0x00	; 0
 40a:	ac d0       	rcall	.+344    	; 0x564 <eeprom_read_block>
	
	//if setting is invalid then write a default value
	if(setting.speed >= SPEED_MAX)
 40c:	89 81       	ldd	r24, Y+1	; 0x01
 40e:	85 30       	cpi	r24, 0x05	; 5
 410:	08 f0       	brcs	.+2      	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
	{
		setting.speed = MS16;
 412:	19 82       	std	Y+1, r1	; 0x01
	}
	
	//if setting is invalid then write a default value
	if(setting.mode>=MODE_BOUNDS)
 414:	8a 81       	ldd	r24, Y+2	; 0x02
 416:	83 30       	cpi	r24, 0x03	; 3
 418:	10 f0       	brcs	.+4      	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
	{
		setting.speed=MODE_CROSSFADE;
 41a:	81 e0       	ldi	r24, 0x01	; 1
 41c:	89 83       	std	Y+1, r24	; 0x01
	}
	//save valid settings	
	eeprom_update_block(&save,&setting,sizeof(control));	
 41e:	42 e0       	ldi	r20, 0x02	; 2
 420:	50 e0       	ldi	r21, 0x00	; 0
 422:	be 01       	movw	r22, r28
 424:	6f 5f       	subi	r22, 0xFF	; 255
 426:	7f 4f       	sbci	r23, 0xFF	; 255
 428:	80 e0       	ldi	r24, 0x00	; 0
 42a:	90 e0       	ldi	r25, 0x00	; 0
 42c:	ab d0       	rcall	.+342    	; 0x584 <eeprom_update_block>
	peripheral_init();
	
	//vars for controlling state of leds
	control setting={1};
	rgb neopixel={0,255,0};		
	counters cnt={0};
 42e:	00 e0       	ldi	r16, 0x00	; 0
 430:	10 e0       	ldi	r17, 0x00	; 0
 432:	e1 2c       	mov	r14, r1
 434:	f1 2c       	mov	r15, r1
 436:	d1 2c       	mov	r13, r1
	//peripherals setup for lowest power possible
	peripheral_init();
	
	//vars for controlling state of leds
	control setting={1};
	rgb neopixel={0,255,0};		
 438:	91 2c       	mov	r9, r1
 43a:	aa 24       	eor	r10, r10
 43c:	aa 94       	dec	r10
 43e:	b1 2c       	mov	r11, r1
		
		if( ! (read_pinb&PIN(BTN_SPEED)) )
		{
			//taking advantage of underflow
			if(--setting.speed >= SPEED_MAX )
			setting.speed= MS256;
 440:	84 e0       	ldi	r24, 0x04	; 4
 442:	78 2e       	mov	r7, r24
		}
	
		if( ! (read_pinb&PIN(BTN_MODE)) )
		{
				if(--setting.mode==MODE_RESET)
				setting.speed=MODE_CROSSFADE;
 444:	88 24       	eor	r8, r8
 446:	83 94       	inc	r8
__attribute__ ((__always_inline__))
void wdt_enable (const uint8_t value)
{
	if (_SFR_IO_REG_P (_WD_CONTROL_REG))
	{
		__asm__ __volatile__ (
 448:	98 e1       	ldi	r25, 0x18	; 24
 44a:	c9 2e       	mov	r12, r25
 44c:	29 c0       	rjmp	.+82     	; 0x4a0 <__LOCK_REGION_LENGTH__+0xa0>
		
		eeprom_update_block(&save,&setting,sizeof(control));
		
		if(setting.mode)
		{
				pixel_tx_progmem(MAX_PIXELS,(output2+cnt.ring),output2, output2+sizeof(output2));
 44e:	b8 01       	movw	r22, r16
 450:	62 5e       	subi	r22, 0xE2	; 226
 452:	7f 4f       	sbci	r23, 0xFF	; 255
 454:	2b e1       	ldi	r18, 0x1B	; 27
 456:	33 e0       	ldi	r19, 0x03	; 3
 458:	4e e1       	ldi	r20, 0x1E	; 30
 45a:	50 e0       	ldi	r21, 0x00	; 0
 45c:	8a e5       	ldi	r24, 0x5A	; 90
 45e:	90 e0       	ldi	r25, 0x00	; 0
 460:	6e df       	rcall	.-292    	; 0x33e <pixel_tx_progmem>
				
				cnt.ring+=3;
 462:	0d 5f       	subi	r16, 0xFD	; 253
 464:	1f 4f       	sbci	r17, 0xFF	; 255
				if(cnt.ring>=sizeof(output2)-3)
 466:	0a 3f       	cpi	r16, 0xFA	; 250
 468:	82 e0       	ldi	r24, 0x02	; 2
 46a:	18 07       	cpc	r17, r24
 46c:	10 f0       	brcs	.+4      	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
				cnt.ring=0;
 46e:	00 e0       	ldi	r16, 0x00	; 0
 470:	10 e0       	ldi	r17, 0x00	; 0
			case DEC_BLUE  : neopixel.blue-- ;  break;
			}
		}
							
		
		wdt_enable(setting.speed);
 472:	89 81       	ldd	r24, Y+1	; 0x01
				"out __SREG__,__tmp_reg__" "\n\t"
				"out %0, %2" "\n \t"
				: /* no outputs */
				: "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
				"r" ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE))),
				"r" ((uint8_t) ((value & 0x08 ? _WD_PS3_MASK : 0x00) |
 474:	83 fd       	sbrc	r24, 3
 476:	56 c0       	rjmp	.+172    	; 0x524 <__LOCK_REGION_LENGTH__+0x124>
 478:	98 e0       	ldi	r25, 0x08	; 8
__attribute__ ((__always_inline__))
void wdt_enable (const uint8_t value)
{
	if (_SFR_IO_REG_P (_WD_CONTROL_REG))
	{
		__asm__ __volatile__ (
 47a:	87 70       	andi	r24, 0x07	; 7
 47c:	89 2b       	or	r24, r25
 47e:	0f b6       	in	r0, 0x3f	; 63
 480:	f8 94       	cli
 482:	a8 95       	wdr
 484:	c1 bc       	out	0x21, r12	; 33
 486:	0f be       	out	0x3f, r0	; 63
 488:	81 bd       	out	0x21, r24	; 33
		WDTCR |= BIT(WDIE);
 48a:	81 b5       	in	r24, 0x21	; 33
 48c:	80 64       	ori	r24, 0x40	; 64
 48e:	81 bd       	out	0x21, r24	; 33
		
		//CLKPR = BIT(CLKPCE);
		//CLKPR = 8; // divide clk by 256
		
		sei();			
 490:	78 94       	sei
		
		sleep_enable();
 492:	85 b7       	in	r24, 0x35	; 53
 494:	80 62       	ori	r24, 0x20	; 32
 496:	85 bf       	out	0x35, r24	; 53
		sleep_cpu();
 498:	88 95       	sleep
		sleep_disable();		
 49a:	85 b7       	in	r24, 0x35	; 53
 49c:	8f 7d       	andi	r24, 0xDF	; 223
 49e:	85 bf       	out	0x35, r24	; 53
	eeprom_update_block(&save,&setting,sizeof(control));	
	 
    while (1) 
    {	
		
		cli();
 4a0:	f8 94       	cli
void wdt_disable (void)
{
	if (_SFR_IO_REG_P (_WD_CONTROL_REG))
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
 4a2:	0f b6       	in	r0, 0x3f	; 63
 4a4:	f8 94       	cli
 4a6:	a8 95       	wdr
 4a8:	81 b5       	in	r24, 0x21	; 33
 4aa:	88 61       	ori	r24, 0x18	; 24
 4ac:	81 bd       	out	0x21, r24	; 33
 4ae:	11 bc       	out	0x21, r1	; 33
 4b0:	0f be       	out	0x3f, r0	; 63
		
		//CLKPR = BIT(CLKPCE);
		//CLKPR = clock_div_1; // frequency to 8mhz
		
		wdt_disable();
		wdt_reset();
 4b2:	a8 95       	wdr
		
		//read_pinb &=~ PIN(BTN_MODE) | PIN(BTN_SPEED);
		//read_pinb ^=  read_pinb;
		
		if( ! (read_pinb&PIN(BTN_SPEED)) )
 4b4:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 4b8:	83 fd       	sbrc	r24, 3
 4ba:	06 c0       	rjmp	.+12     	; 0x4c8 <__LOCK_REGION_LENGTH__+0xc8>
		{
			//taking advantage of underflow
			if(--setting.speed >= SPEED_MAX )
 4bc:	89 81       	ldd	r24, Y+1	; 0x01
 4be:	81 50       	subi	r24, 0x01	; 1
 4c0:	85 30       	cpi	r24, 0x05	; 5
 4c2:	08 f0       	brcs	.+2      	; 0x4c6 <__LOCK_REGION_LENGTH__+0xc6>
 4c4:	40 c0       	rjmp	.+128    	; 0x546 <__LOCK_REGION_LENGTH__+0x146>
 4c6:	89 83       	std	Y+1, r24	; 0x01
			setting.speed= MS256;
			
		}
	
		if( ! (read_pinb&PIN(BTN_MODE)) )
 4c8:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 4cc:	82 fd       	sbrc	r24, 2
 4ce:	06 c0       	rjmp	.+12     	; 0x4dc <__LOCK_REGION_LENGTH__+0xdc>
		{
				if(--setting.mode==MODE_RESET)
 4d0:	8a 81       	ldd	r24, Y+2	; 0x02
 4d2:	81 50       	subi	r24, 0x01	; 1
 4d4:	8a 83       	std	Y+2, r24	; 0x02
 4d6:	81 11       	cpse	r24, r1
 4d8:	01 c0       	rjmp	.+2      	; 0x4dc <__LOCK_REGION_LENGTH__+0xdc>
				setting.speed=MODE_CROSSFADE;
 4da:	89 82       	std	Y+1, r8	; 0x01
		}
	
		
		eeprom_update_block(&save,&setting,sizeof(control));
 4dc:	42 e0       	ldi	r20, 0x02	; 2
 4de:	50 e0       	ldi	r21, 0x00	; 0
 4e0:	be 01       	movw	r22, r28
 4e2:	6f 5f       	subi	r22, 0xFF	; 255
 4e4:	7f 4f       	sbci	r23, 0xFF	; 255
 4e6:	80 e0       	ldi	r24, 0x00	; 0
 4e8:	90 e0       	ldi	r25, 0x00	; 0
 4ea:	4c d0       	rcall	.+152    	; 0x584 <eeprom_update_block>
		
		if(setting.mode)
 4ec:	8a 81       	ldd	r24, Y+2	; 0x02
 4ee:	81 11       	cpse	r24, r1
 4f0:	ae cf       	rjmp	.-164    	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
		}	
		//output colors to ws2812 using a ring buffer 
		
		else
		{
			pixel_tx_singlecolor(MAX_PIXELS,neopixel.green,neopixel.red,neopixel.blue);
 4f2:	29 2d       	mov	r18, r9
 4f4:	4a 2d       	mov	r20, r10
 4f6:	6b 2d       	mov	r22, r11
 4f8:	8a e5       	ldi	r24, 0x5A	; 90
 4fa:	90 e0       	ldi	r25, 0x00	; 0
 4fc:	3a df       	rcall	.-396    	; 0x372 <pixel_tx_singlecolor>
			
			
			if(++cnt.color>=256)
 4fe:	8f ef       	ldi	r24, 0xFF	; 255
 500:	e8 1a       	sub	r14, r24
 502:	f8 0a       	sbc	r15, r24
 504:	8f ef       	ldi	r24, 0xFF	; 255
 506:	e8 16       	cp	r14, r24
 508:	f1 04       	cpc	r15, r1
 50a:	71 f0       	breq	.+28     	; 0x528 <__LOCK_REGION_LENGTH__+0x128>
 50c:	68 f0       	brcs	.+26     	; 0x528 <__LOCK_REGION_LENGTH__+0x128>
			{
				cnt.color=0;
				
				cnt.rgbswitch++;
 50e:	d3 94       	inc	r13
				if(cnt.rgbswitch>=RGBSWITCH_RESET)
 510:	85 e0       	ldi	r24, 0x05	; 5
			pixel_tx_singlecolor(MAX_PIXELS,neopixel.green,neopixel.red,neopixel.blue);
			
			
			if(++cnt.color>=256)
			{
				cnt.color=0;
 512:	e1 2c       	mov	r14, r1
 514:	f1 2c       	mov	r15, r1
				
				cnt.rgbswitch++;
				if(cnt.rgbswitch>=RGBSWITCH_RESET)
 516:	8d 15       	cp	r24, r13
 518:	38 f4       	brcc	.+14     	; 0x528 <__LOCK_REGION_LENGTH__+0x128>
				cnt.rgbswitch=0;
			}
	
			switch(cnt.rgbswitch){
			case INC_GREEN : neopixel.green++;  break;
 51a:	b3 94       	inc	r11
 51c:	d1 2c       	mov	r13, r1
			case DEC_BLUE  : neopixel.blue-- ;  break;
			}
		}
							
		
		wdt_enable(setting.speed);
 51e:	89 81       	ldd	r24, Y+1	; 0x01
				"out __SREG__,__tmp_reg__" "\n\t"
				"out %0, %2" "\n \t"
				: /* no outputs */
				: "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
				"r" ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE))),
				"r" ((uint8_t) ((value & 0x08 ? _WD_PS3_MASK : 0x00) |
 520:	83 ff       	sbrs	r24, 3
 522:	aa cf       	rjmp	.-172    	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
 524:	98 e2       	ldi	r25, 0x28	; 40
 526:	a9 cf       	rjmp	.-174    	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
				cnt.rgbswitch++;
				if(cnt.rgbswitch>=RGBSWITCH_RESET)
				cnt.rgbswitch=0;
			}
	
			switch(cnt.rgbswitch){
 528:	82 e0       	ldi	r24, 0x02	; 2
 52a:	d8 16       	cp	r13, r24
 52c:	a9 f0       	breq	.+42     	; 0x558 <__LOCK_REGION_LENGTH__+0x158>
 52e:	8d 15       	cp	r24, r13
 530:	60 f4       	brcc	.+24     	; 0x54a <__LOCK_REGION_LENGTH__+0x14a>
 532:	84 e0       	ldi	r24, 0x04	; 4
 534:	d8 16       	cp	r13, r24
 536:	a1 f0       	breq	.+40     	; 0x560 <__LOCK_REGION_LENGTH__+0x160>
 538:	d8 16       	cp	r13, r24
 53a:	80 f0       	brcs	.+32     	; 0x55c <__LOCK_REGION_LENGTH__+0x15c>
 53c:	85 e0       	ldi	r24, 0x05	; 5
 53e:	d8 12       	cpse	r13, r24
 540:	98 cf       	rjmp	.-208    	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
			case INC_GREEN : neopixel.green++;  break;
			case DEC_RED   : neopixel.red--  ;  break;
			case INC_BLUE  : neopixel.blue++ ;  break;
			case DEC_GREEN : neopixel.green--;  break;
			case INC_RED   : neopixel.red++  ;  break;
			case DEC_BLUE  : neopixel.blue-- ;  break;
 542:	9a 94       	dec	r9
 544:	96 cf       	rjmp	.-212    	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
		
		if( ! (read_pinb&PIN(BTN_SPEED)) )
		{
			//taking advantage of underflow
			if(--setting.speed >= SPEED_MAX )
			setting.speed= MS256;
 546:	79 82       	std	Y+1, r7	; 0x01
 548:	bf cf       	rjmp	.-130    	; 0x4c8 <__LOCK_REGION_LENGTH__+0xc8>
				cnt.rgbswitch++;
				if(cnt.rgbswitch>=RGBSWITCH_RESET)
				cnt.rgbswitch=0;
			}
	
			switch(cnt.rgbswitch){
 54a:	dd 20       	and	r13, r13
 54c:	31 f3       	breq	.-52     	; 0x51a <__LOCK_REGION_LENGTH__+0x11a>
 54e:	81 e0       	ldi	r24, 0x01	; 1
 550:	d8 12       	cpse	r13, r24
 552:	8f cf       	rjmp	.-226    	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
			case INC_GREEN : neopixel.green++;  break;
			case DEC_RED   : neopixel.red--  ;  break;
 554:	aa 94       	dec	r10
 556:	8d cf       	rjmp	.-230    	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
			case INC_BLUE  : neopixel.blue++ ;  break;
 558:	93 94       	inc	r9
 55a:	8b cf       	rjmp	.-234    	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
			case DEC_GREEN : neopixel.green--;  break;
 55c:	ba 94       	dec	r11
 55e:	89 cf       	rjmp	.-238    	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
			case INC_RED   : neopixel.red++  ;  break;
 560:	a3 94       	inc	r10
 562:	87 cf       	rjmp	.-242    	; 0x472 <__LOCK_REGION_LENGTH__+0x72>

00000564 <eeprom_read_block>:
 564:	dc 01       	movw	r26, r24
 566:	cb 01       	movw	r24, r22

00000568 <eeprom_read_blraw>:
 568:	fc 01       	movw	r30, r24
 56a:	e1 99       	sbic	0x1c, 1	; 28
 56c:	fe cf       	rjmp	.-4      	; 0x56a <eeprom_read_blraw+0x2>
 56e:	06 c0       	rjmp	.+12     	; 0x57c <eeprom_read_blraw+0x14>
 570:	ff bb       	out	0x1f, r31	; 31
 572:	ee bb       	out	0x1e, r30	; 30
 574:	e0 9a       	sbi	0x1c, 0	; 28
 576:	31 96       	adiw	r30, 0x01	; 1
 578:	0d b2       	in	r0, 0x1d	; 29
 57a:	0d 92       	st	X+, r0
 57c:	41 50       	subi	r20, 0x01	; 1
 57e:	50 40       	sbci	r21, 0x00	; 0
 580:	b8 f7       	brcc	.-18     	; 0x570 <eeprom_read_blraw+0x8>
 582:	08 95       	ret

00000584 <eeprom_update_block>:
 584:	dc 01       	movw	r26, r24
 586:	a4 0f       	add	r26, r20
 588:	b5 1f       	adc	r27, r21
 58a:	41 50       	subi	r20, 0x01	; 1
 58c:	50 40       	sbci	r21, 0x00	; 0
 58e:	40 f0       	brcs	.+16     	; 0x5a0 <eeprom_update_block+0x1c>
 590:	cb 01       	movw	r24, r22
 592:	84 0f       	add	r24, r20
 594:	95 1f       	adc	r25, r21
 596:	2e 91       	ld	r18, -X
 598:	05 d0       	rcall	.+10     	; 0x5a4 <eeprom_update_r18>
 59a:	41 50       	subi	r20, 0x01	; 1
 59c:	50 40       	sbci	r21, 0x00	; 0
 59e:	d8 f7       	brcc	.-10     	; 0x596 <eeprom_update_block+0x12>
 5a0:	08 95       	ret

000005a2 <eeprom_update_byte>:
 5a2:	26 2f       	mov	r18, r22

000005a4 <eeprom_update_r18>:
 5a4:	e1 99       	sbic	0x1c, 1	; 28
 5a6:	fe cf       	rjmp	.-4      	; 0x5a4 <eeprom_update_r18>
 5a8:	9f bb       	out	0x1f, r25	; 31
 5aa:	8e bb       	out	0x1e, r24	; 30
 5ac:	e0 9a       	sbi	0x1c, 0	; 28
 5ae:	01 97       	sbiw	r24, 0x01	; 1
 5b0:	0d b2       	in	r0, 0x1d	; 29
 5b2:	02 16       	cp	r0, r18
 5b4:	39 f0       	breq	.+14     	; 0x5c4 <eeprom_update_r18+0x20>
 5b6:	1c ba       	out	0x1c, r1	; 28
 5b8:	2d bb       	out	0x1d, r18	; 29
 5ba:	0f b6       	in	r0, 0x3f	; 63
 5bc:	f8 94       	cli
 5be:	e2 9a       	sbi	0x1c, 2	; 28
 5c0:	e1 9a       	sbi	0x1c, 1	; 28
 5c2:	0f be       	out	0x3f, r0	; 63
 5c4:	08 95       	ret

000005c6 <_exit>:
 5c6:	f8 94       	cli

000005c8 <__stop_program>:
 5c8:	ff cf       	rjmp	.-2      	; 0x5c8 <__stop_program>
